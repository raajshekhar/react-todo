{"version":3,"sources":["logo.svg","service/axios-instance.js","Email/Email.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","instance","axios","create","baseURL","TextInput","props","react_default","a","createElement","react","className","htmlFor","name","type","value","id","onChange","handleChange","EmailNotification","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","message","bind","assertThisInitialized","handleSubmit","event","saveChanges","defineProperty","target","setState","objectSpread","console","log","e","preventDefault","get","then","_this2","onSubmit","autoComplete","keys","map","element","Email_TextInput","key","onClick","Component","App","style","display","src","logo","alt","href","rel","Email_Email","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.367bd2a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://react-my-burger-ad326.firebaseio.com/'\n})\n//https://react-my-burger-ad326.firebaseio.com/\n//  'http:localhost:8888' for local\nexport default instance;","import React, { Component, Fragment } from 'react'\nimport './Email.css'\n//import axios from 'axios'\nimport axios from './../service/axios-instance'\nconst TextInput = (props) => {\n    return (\n            <Fragment>\n                <div  className='form-child'>\n                <label htmlFor={ props.name }> { props.name } </label>\n            <input\n                type={ props.type }\n                name={ props.name }\n                value={ props.value }\n                id={ props.name }\n                onChange={props.handleChange} />\n                </div>\n            </Fragment>\n    )\n}\n\nclass EmailNotification extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            message: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event){\n        const saveChanges = { [event.target.name]: event.target.value }\n        this.setState({ ...saveChanges })\n        console.log('event: ',this)\n    }\n\n    async handleSubmit(e){\n       e.preventDefault()\n        console.log('e: ',e)\n        const {  name, email, message} = this.state;\n        // const form = await axios.post('/orders.json', {\n        //     name,\n        //      email,\n        //       message\n        // })\n\n        axios.get('/orders.json').then(e => console.log('Fetch: ', e))\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                 <form onSubmit={this.handleSubmit} autoComplete='off'>\n                    { Object.keys( this.state ).map( element => {\n                        return (\n                            <TextInput key={element}  type=\"text\" className='form-child' name={element} value={ this.state[ element ] } handleChange={this.handleChange} />\n                         )\n                    }) }\n                    \n                    {/*  SUBMIT BUTTON  */}\n                    <div className=\"form-child\">\n                        <input\n                            type=\"button\"\n                            name=\"message\"\n                            id=\"submitButton\"\n                            value=\"submit\"\n                            onClick={this.handleSubmit} />\n                    </div>\n                    {/*  SUBMIT BUTTON  */}\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EmailNotification","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EmailNotify from './Email/Email'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" style={{display: 'none'}}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <main>\n          <section>\n            <EmailNotify/>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}