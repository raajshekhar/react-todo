{"version":3,"sources":["logo.svg","service/axios-instance.js","Email/Email.js","todo/todo-functional/todo-func.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","instance","axios","create","baseURL","TextInput","props","react_default","a","createElement","react","className","htmlFor","name","type","value","id","onChange","handleChange","Component","appReducer","state","action","Object","toConsumableArray","payload","concat","Date","now","text","completed","filter","item","console","log","map","objectSpread","Context","React","createContext","TodoList","_ref","items","TodoItem","assign","key","_ref2","dispatch","useContext","checked","defaultValue","onClick","todo","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","raw","localStorage","getItem","JSON","parse","length","setItem","stringify","vals","one","Provider","App","src","logo","alt","href","target","rel","todo_functional_todo_func","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.321f635f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\n\n\nconst instance = axios.create({\n    baseURL: 'https://react-my-burger-ad326.firebaseio.com/'\n})\n//https://react-my-burger-ad326.firebaseio.com/\n//  'http:localhost:8888' for local\nexport default instance;","import React, { Component, Fragment } from 'react'\nimport './Email.css'\n//import axios from 'axios'\nimport axios from './../service/axios-instance'\nconst TextInput = (props) => {\n    return (\n            <Fragment>\n                <div  className='form-child'>\n                <label htmlFor={ props.name }> { props.name } </label>\n            <input\n                type={ props.type }\n                name={ props.name }\n                value={ props.value }\n                id={ props.name }\n                onChange={props.handleChange} />\n                </div>\n            </Fragment>\n    )\n}\n\nclass EmailNotification extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            message: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event){\n        const saveChanges = { [event.target.name]: event.target.value }\n        this.setState({ ...saveChanges })\n        console.log('event: ',this)\n    }\n\n    async handleSubmit(e){\n       e.preventDefault()\n        console.log('e: ',e)\n        const {  name, email, message} = this.state;\n        // const form = await axios.post('/orders.json', {\n        //     name,\n        //      email,\n        //       message\n        // })\n\n        axios.get('/orders.json').then(e => console.log('Fetch: ', e))\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                 <form onSubmit={this.handleSubmit} autoComplete='off'>\n                    { Object.keys( this.state ).map( element => {\n                        return (\n                            <TextInput key={element}  type=\"text\" className='form-child' name={element} value={ this.state[ element ] } handleChange={this.handleChange} />\n                         )\n                    }) }\n                    \n                    {/*  SUBMIT BUTTON  */}\n                    <div className=\"form-child\">\n                        <input\n                            type=\"button\"\n                            name=\"message\"\n                            id=\"submitButton\"\n                            value=\"submit\"\n                            onClick={this.handleSubmit} />\n                    </div>\n                    {/*  SUBMIT BUTTON  */}\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EmailNotification","import React, { useReducer, useContext, useEffect } from 'react'\nimport './todo-func.css'\nimport axios from '../../service/axios-instance'\n\nfunction appReducer(state, action) {\n    switch (action.type) {\n        case 'reset': {\n            return [...action.payload]\n        }\n        case 'add': {\n            return [\n                ...state,\n                {\n                    id: Date.now(),\n                    text: '',\n                    completed: false\n                }\n            ]\n        }\n        case 'delete': {\n            return state.filter(item => item.id !== action.payload)\n        }\n        case 'completed': {\n            console.log('item: ', state, action)\n            return state.map(item => {\n                if (item.id == action.payload) {\n                    return {\n                        ...item,\n                        completed: !item.completed\n                    }\n                }\n                return item\n            })\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nconst Context = React.createContext()\n\nconst todo = () => {\n\n    const [state, dispatch] = useReducer(appReducer, [])\n\n    useEffect(() => {\n        let raw = localStorage.getItem('data');\n        dispatch({ type: 'reset', payload: JSON.parse(raw) })\n    }, [])\n\n    useEffect(() => {\n        console.log('state:: ',state.length)\n        if(state.length < 10) localStorage.setItem('data', JSON.stringify(state));\n        \n    }, [state])\n\n\n    const vals = {\n        dispatch,\n        one: 1\n    }\n\n    return (\n\n        <Context.Provider value={vals}>\n            <div className=\"container\">\n                <button onClick={() => dispatch({ type: 'add' })}>NEW TODO </button>\n                { (state.length >= 10) ?  <p>We are storing 10 items only</p> : '' }\n                <TodoList items={state} dispatch={dispatch} />\n            </div>\n        </Context.Provider>\n    )\n};\n\nfunction TodoList({ items }) {\n    console.log('items::: ', items)\n    return items.map(item => <TodoItem key={item.id} {...item} />)\n}\n\nfunction TodoItem({ id, completed, text }) {\n    const dispatch = useContext(Context);\n    return (\n        <div className=\"todo--item\">\n            <input type=\"checkbox\" checked={completed} onChange={() => dispatch({ type: 'completed', payload: id })} />\n            <input type=\"text\" defaultValue={text} />\n            <button onClick={() => dispatch({ type: 'delete', payload: id })}> Delete</button>\n        </div>\n    );\n}\n\n\nexport default todo","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EmailNotify from './Email/Email'\n\nimport TodoFunctional from './todo/todo-functional/todo-func'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" >\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <main>\n          <section>\n            <TodoFunctional/>\n          </section>\n          {/* <section>\n            <EmailNotify/>\n          </section> */}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}